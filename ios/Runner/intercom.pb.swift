// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: intercom.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ValidMethod: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case getPhoto // = 1
  case listPhotos // = 3
  case getPhotoMetadata // = 4
  case removePhotoMetadata // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .getPhoto
    case 3: self = .listPhotos
    case 4: self = .getPhotoMetadata
    case 5: self = .removePhotoMetadata
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .getPhoto: return 1
    case .listPhotos: return 3
    case .getPhotoMetadata: return 4
    case .removePhotoMetadata: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ValidMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [ValidMethod] = [
    .unknown,
    .getPhoto,
    .listPhotos,
    .getPhotoMetadata,
    .removePhotoMetadata,
  ]
}

#endif  // swift(>=4.2)

enum DataType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case null // = 0
  case bool // = 1
  case int32 // = 2
  case int64 // = 3
  case float64 // = 4
  case string // = 5
  case uint8List // = 6
  case int32List // = 7
  case int64List // = 8

  /// Dart Does not contain Float32List for buffer writer
  case float32List // = 9
  case float64List // = 10
  case list // = 11
  case map // = 12
  case message // = 13
  case UNRECOGNIZED(Int)

  init() {
    self = .null
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .null
    case 1: self = .bool
    case 2: self = .int32
    case 3: self = .int64
    case 4: self = .float64
    case 5: self = .string
    case 6: self = .uint8List
    case 7: self = .int32List
    case 8: self = .int64List
    case 9: self = .float32List
    case 10: self = .float64List
    case 11: self = .list
    case 12: self = .map
    case 13: self = .message
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .null: return 0
    case .bool: return 1
    case .int32: return 2
    case .int64: return 3
    case .float64: return 4
    case .string: return 5
    case .uint8List: return 6
    case .int32List: return 7
    case .int64List: return 8
    case .float32List: return 9
    case .float64List: return 10
    case .list: return 11
    case .map: return 12
    case .message: return 13
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension DataType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [DataType] = [
    .null,
    .bool,
    .int32,
    .int64,
    .float64,
    .string,
    .uint8List,
    .int32List,
    .int64List,
    .float32List,
    .float64List,
    .list,
    .map,
    .message,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ValidMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "GET_PHOTO"),
    3: .same(proto: "LIST_PHOTOS"),
    4: .same(proto: "GET_PHOTO_METADATA"),
    5: .same(proto: "REMOVE_PHOTO_METADATA"),
  ]
}

extension DataType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "BOOL"),
    2: .same(proto: "INT32"),
    3: .same(proto: "INT64"),
    4: .same(proto: "FLOAT64"),
    5: .same(proto: "STRING"),
    6: .same(proto: "UINT8LIST"),
    7: .same(proto: "INT32LIST"),
    8: .same(proto: "INT64LIST"),
    9: .same(proto: "FLOAT32LIST"),
    10: .same(proto: "FLOAT64LIST"),
    11: .same(proto: "LIST"),
    12: .same(proto: "MAP"),
    13: .same(proto: "MESSAGE"),
  ]
}
